df_plot = df_plot %>% gather(method, value, em, hvg,dip, FS,HLG,trend,M3Drop)
df_plot %>% ggplot(aes(x = step, y = value, col = method)) + geom_line() + scale_y_log10() +ggtitle("SNN_TV_Base10_8000")
df_rank_trend = data.frame(em = em_traj, hvg = hvg_traj, dip= hvgdisp_traj, FS = deviance_traj, HLG = HLG_traj,
trend = trend_traj, M3Drop = M3DropDANB_traj)
value = apply(df_rank[1:10,], 2, min)
value
em_traj
HLG
HLG_traj
df_rank_trend = data.frame(em = em_traj, hvg = hvg_traj, dip= hvgdisp_traj, FS = deviance_traj, HLG = HLG_traj,
trend = trend_traj, M3Drop = M3DropDANB_traj)
df_rank = data.frame(em = em_traj, hvg = hvg_traj, dip= hvgdisp_traj, FS = deviance_traj, HLG = HLG_traj,
trend = trend_traj, M3Drop = M3DropDANB_traj)
value = apply(df_rank[1:10,], 2, min)
sort(value)
pbmc@assays$RNA@var.features = (HVG)[1:5000]
pbmc <- RunPCA(pbmc, npcs = 10, verbose = F)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
graph_base = as.matrix(pbmc@graphs$RNA_snn)
graph_base = graph_base / sum(graph_base)
pbmc@assays$RNA@var.features = (hvgvst)[1:5000]
pbmc <- RunPCA(pbmc, npcs = 10, verbose = F)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
graph_base = as.matrix(pbmc@graphs$RNA_snn)
graph_base = graph_base / sum(graph_base)
em_traj = NULL
de_traj = NULL
edge_traj = NULL
hvg_traj = NULL
hvgdisp_traj = NULL
deviance_traj = NULL
HLG_traj = NULL
trend_traj = NULL
M3DropDANB_traj = NULL
for(i in 1:10){
# i = 18
print(i)
pbmc_em@assays$RNA@var.features =  c(EM[1:(i*100)])
pbmc_em <- RunPCA(pbmc_em, npcs = 10, verbose = F)
pbmc_em <- FindNeighbors(pbmc_em, dims = 1:10)
graph_em = as.matrix(pbmc_em@graphs$RNA_snn)
graph_em = graph_em / sum(graph_em)
em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# pbmc_em <- FindClusters(pbmc_em, resolution = 0.5)
# adjustedRandIndex(pbmc_em$seurat_clusters, cluster_label)
# DimPlot(pbmc_em, reduction = "umap", label = TRUE, pt.size = 0.5)  + NoLegend() +labs(title = "EM")
# em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# # pbmc_hvg@assays$RNA@var.features = hvg[1:(i*100)]
pbmc_hvg@assays$RNA@var.features = hvgvst[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvg_traj = c(hvg_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = hvgdisp[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvgdisp_traj = c(hvgdisp_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = devianceFS[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
deviance_traj = c(deviance_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = HLG[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
HLG_traj = c(HLG_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = trendvar[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
trend_traj = c(trend_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = M3DropDANB[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
M3DropDANB_traj = c(M3DropDANB_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
}
df_rank = data.frame(em = em_traj, hvg = hvg_traj, dip= hvgdisp_traj, FS = deviance_traj, HLG = HLG_traj,
trend = trend_traj, M3Drop = M3DropDANB_traj)
value = apply(df_rank[1:10,], 2, min)
sort(value)
pbmc@assays$RNA@var.features = (hvgdisp)[1:5000]
pbmc <- RunPCA(pbmc, npcs = 10, verbose = F)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
graph_base = as.matrix(pbmc@graphs$RNA_snn)
graph_base = graph_base / sum(graph_base)
em_traj = NULL
de_traj = NULL
edge_traj = NULL
hvg_traj = NULL
hvgdisp_traj = NULL
deviance_traj = NULL
HLG_traj = NULL
trend_traj = NULL
M3DropDANB_traj = NULL
for(i in 1:10){
# i = 18
print(i)
pbmc_em@assays$RNA@var.features =  c(EM[1:(i*100)])
pbmc_em <- RunPCA(pbmc_em, npcs = 10, verbose = F)
pbmc_em <- FindNeighbors(pbmc_em, dims = 1:10)
graph_em = as.matrix(pbmc_em@graphs$RNA_snn)
graph_em = graph_em / sum(graph_em)
em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# pbmc_em <- FindClusters(pbmc_em, resolution = 0.5)
# adjustedRandIndex(pbmc_em$seurat_clusters, cluster_label)
# DimPlot(pbmc_em, reduction = "umap", label = TRUE, pt.size = 0.5)  + NoLegend() +labs(title = "EM")
# em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# # pbmc_hvg@assays$RNA@var.features = hvg[1:(i*100)]
pbmc_hvg@assays$RNA@var.features = hvgvst[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvg_traj = c(hvg_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = hvgdisp[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvgdisp_traj = c(hvgdisp_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = devianceFS[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
deviance_traj = c(deviance_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = HLG[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
HLG_traj = c(HLG_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = trendvar[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
trend_traj = c(trend_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = M3DropDANB[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
M3DropDANB_traj = c(M3DropDANB_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
}
value = apply(df_rank[1:10,], 2, min)
df_rank = data.frame(em = em_traj, hvg = hvg_traj, dip= hvgdisp_traj, FS = deviance_traj, HLG = HLG_traj,
trend = trend_traj, M3Drop = M3DropDANB_traj)
value = apply(df_rank[1:10,], 2, min)
sort(value)
pbmc@assays$RNA@var.features = (M3DropDANB)[1:5000]
pbmc <- RunPCA(pbmc, npcs = 10, verbose = F)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
graph_base = as.matrix(pbmc@graphs$RNA_snn)
graph_base = graph_base / sum(graph_base)
em_traj = NULL
de_traj = NULL
edge_traj = NULL
hvg_traj = NULL
hvgdisp_traj = NULL
deviance_traj = NULL
HLG_traj = NULL
trend_traj = NULL
M3DropDANB_traj = NULL
for(i in 1:10){
# i = 18
print(i)
pbmc_em@assays$RNA@var.features =  c(EM[1:(i*100)])
pbmc_em <- RunPCA(pbmc_em, npcs = 10, verbose = F)
pbmc_em <- FindNeighbors(pbmc_em, dims = 1:10)
graph_em = as.matrix(pbmc_em@graphs$RNA_snn)
graph_em = graph_em / sum(graph_em)
em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# pbmc_em <- FindClusters(pbmc_em, resolution = 0.5)
# adjustedRandIndex(pbmc_em$seurat_clusters, cluster_label)
# DimPlot(pbmc_em, reduction = "umap", label = TRUE, pt.size = 0.5)  + NoLegend() +labs(title = "EM")
# em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# # pbmc_hvg@assays$RNA@var.features = hvg[1:(i*100)]
pbmc_hvg@assays$RNA@var.features = hvgvst[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvg_traj = c(hvg_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = hvgdisp[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvgdisp_traj = c(hvgdisp_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = devianceFS[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
deviance_traj = c(deviance_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = HLG[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
HLG_traj = c(HLG_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = trendvar[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
trend_traj = c(trend_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = M3DropDANB[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
M3DropDANB_traj = c(M3DropDANB_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
}
df_rank = data.frame(em = em_traj, hvg = hvg_traj, dip= hvgdisp_traj, FS = deviance_traj, HLG = HLG_traj,
trend = trend_traj, M3Drop = M3DropDANB_traj)
value = apply(df_rank[1:10,], 2, min)
sort(value)
pbmc@assays$RNA@var.features = (devianceFS[1:5000])
pbmc <- RunPCA(pbmc, npcs = 10, verbose = F)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
graph_base = as.matrix(pbmc@graphs$RNA_snn)
graph_base = graph_base / sum(graph_base)
em_traj = NULL
de_traj = NULL
edge_traj = NULL
hvg_traj = NULL
hvgdisp_traj = NULL
deviance_traj = NULL
HLG_traj = NULL
trend_traj = NULL
M3DropDANB_traj = NULL
for(i in 1:20){
# i = 18
print(i)
pbmc_em@assays$RNA@var.features =  c(EM[1:(i*100)])
pbmc_em <- RunPCA(pbmc_em, npcs = 10, verbose = F)
pbmc_em <- FindNeighbors(pbmc_em, dims = 1:10)
graph_em = as.matrix(pbmc_em@graphs$RNA_snn)
graph_em = graph_em / sum(graph_em)
em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# pbmc_em <- FindClusters(pbmc_em, resolution = 0.5)
# adjustedRandIndex(pbmc_em$seurat_clusters, cluster_label)
# DimPlot(pbmc_em, reduction = "umap", label = TRUE, pt.size = 0.5)  + NoLegend() +labs(title = "EM")
# em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# # pbmc_hvg@assays$RNA@var.features = hvg[1:(i*100)]
pbmc_hvg@assays$RNA@var.features = hvgvst[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvg_traj = c(hvg_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = hvgdisp[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvgdisp_traj = c(hvgdisp_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = devianceFS[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
deviance_traj = c(deviance_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = HLG[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
HLG_traj = c(HLG_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = trendvar[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
trend_traj = c(trend_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = M3DropDANB[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
M3DropDANB_traj = c(M3DropDANB_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
}
df_rank = data.frame(em = em_traj, hvg = hvg_traj, dip= hvgdisp_traj, FS = deviance_traj, HLG = HLG_traj,
trend = trend_traj, M3Drop = M3DropDANB_traj)
value = apply(df_rank[1:10,], 2, min)
sort(value)
value = apply(df_rank[1:20,], 2, min)
sort(value)
pbmc@assays$RNA@var.features = (EM[1:5000])
pbmc <- RunPCA(pbmc, npcs = 10, verbose = F)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
graph_base = as.matrix(pbmc@graphs$RNA_snn)
graph_base = graph_base / sum(graph_base)
em_traj = NULL
de_traj = NULL
edge_traj = NULL
hvg_traj = NULL
hvgdisp_traj = NULL
deviance_traj = NULL
HLG_traj = NULL
trend_traj = NULL
M3DropDANB_traj = NULL
for(i in 1:20){
# i = 18
print(i)
pbmc_em@assays$RNA@var.features =  c(EM[1:(i*100)])
pbmc_em <- RunPCA(pbmc_em, npcs = 10, verbose = F)
pbmc_em <- FindNeighbors(pbmc_em, dims = 1:10)
graph_em = as.matrix(pbmc_em@graphs$RNA_snn)
graph_em = graph_em / sum(graph_em)
em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# pbmc_em <- FindClusters(pbmc_em, resolution = 0.5)
# adjustedRandIndex(pbmc_em$seurat_clusters, cluster_label)
# DimPlot(pbmc_em, reduction = "umap", label = TRUE, pt.size = 0.5)  + NoLegend() +labs(title = "EM")
# em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# # pbmc_hvg@assays$RNA@var.features = hvg[1:(i*100)]
pbmc_hvg@assays$RNA@var.features = hvgvst[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvg_traj = c(hvg_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = hvgdisp[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvgdisp_traj = c(hvgdisp_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = devianceFS[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
deviance_traj = c(deviance_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = HLG[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
HLG_traj = c(HLG_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = trendvar[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
trend_traj = c(trend_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = M3DropDANB[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
M3DropDANB_traj = c(M3DropDANB_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
}
df_rank = data.frame(em = em_traj, hvg = hvg_traj, dip= hvgdisp_traj, FS = deviance_traj, HLG = HLG_traj,
trend = trend_traj, M3Drop = M3DropDANB_traj)
# save(df_rank_trend, file = "df_rank_trend.Rdata")
value = apply(df_rank[1:10,], 2, min)
sort(value)
# save(df_rank_trend, file = "df_rank_trend.Rdata")
value = apply(df_rank[1:20,], 2, min)
sort(value)
all_gene = rownames(pbmc)
pbmc@assays$RNA@var.features = all_gene
pbmc <- RunPCA(pbmc, npcs = 30, verbose = F)
pbmc <- FindNeighbors(pbmc, dims = 1:30)
graph_base = as.matrix(pbmc@graphs$RNA_snn)
graph_base = graph_base / sum(graph_base)
em_traj = NULL
de_traj = NULL
edge_traj = NULL
hvg_traj = NULL
hvgdisp_traj = NULL
deviance_traj = NULL
HLG_traj = NULL
trend_traj = NULL
M3DropDANB_traj = NULL
for(i in 1:20){
# i = 18
print(i)
pbmc_em@assays$RNA@var.features =  c(EM[1:(i*100)])
pbmc_em <- RunPCA(pbmc_em, npcs = 10, verbose = F)
pbmc_em <- FindNeighbors(pbmc_em, dims = 1:10)
graph_em = as.matrix(pbmc_em@graphs$RNA_snn)
graph_em = graph_em / sum(graph_em)
em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# pbmc_em <- FindClusters(pbmc_em, resolution = 0.5)
# adjustedRandIndex(pbmc_em$seurat_clusters, cluster_label)
# DimPlot(pbmc_em, reduction = "umap", label = TRUE, pt.size = 0.5)  + NoLegend() +labs(title = "EM")
# em_traj = c(em_traj,  sum(graph_base * abs(graph_base - graph_em)))
# # pbmc_hvg@assays$RNA@var.features = hvg[1:(i*100)]
pbmc_hvg@assays$RNA@var.features = hvgvst[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvg_traj = c(hvg_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = hvgdisp[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
hvgdisp_traj = c(hvgdisp_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = devianceFS[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
deviance_traj = c(deviance_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = HLG[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
HLG_traj = c(HLG_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = trendvar[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
trend_traj = c(trend_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
pbmc_hvg@assays$RNA@var.features = M3DropDANB[1:(i*100)]
pbmc_hvg <- RunPCA(pbmc_hvg, npcs = 10, verbose = F)
pbmc_hvg <- FindNeighbors(pbmc_hvg, dims = 1:10)
graph_hvg = as.matrix(pbmc_hvg@graphs$RNA_snn)
graph_hvg = graph_hvg / sum(graph_hvg)
M3DropDANB_traj = c(M3DropDANB_traj,  sum(graph_base * abs(graph_base - graph_hvg)))
}
# save(df_rank_trend, file = "df_rank_trend.Rdata")
value = apply(df_rank[1:10,], 2, min)
sort(value)
df_rank = data.frame(em = em_traj, hvg = hvg_traj, dip= hvgdisp_traj, FS = deviance_traj, HLG = HLG_traj,
trend = trend_traj, M3Drop = M3DropDANB_traj)
# save(df_rank_trend, file = "df_rank_trend.Rdata")
value = apply(df_rank[1:10,], 2, min)
sort(value)
# save(df_rank_trend, file = "df_rank_trend.Rdata")
value = apply(df_rank[1:20,], 2, min)
sort(value)
data_1000 = data.frame(EM_rank = c(1,1,4,3,1,1,1),
FS_rank = c(2,4,1,2,4,1,3),
Trend_rank =c(3,3,2,1,3,3,4),
M3drop_rank = c( 4,5,5,2,4,4,6),
HVGvst_rank = c(6,6,6,6,6,6,5),
HVGdisp_rank = c(5,6,5,5,5,5,7),
HLG_rank = c(2,3,4,3,2,2,2)
)
data_1000 = data_1000 %>% gather(method, rank, EM_rank, FS_rank,
Trend_rank, M3drop_rank,HVGvst_rank,HVGdisp_rank,
HLG_rank)
df_plot %>% ggplot(aes(x = method, y = rank, col = method)) + geom_dotplot(binaxis = y)+ggtitle("rank_1000")
df_plot %>% ggplot(aes(x = method, y = rank, col = method)) + geom_dotplot(binaxis = rank)+ggtitle("rank_1000")
df_plot %>% ggplot(aes(x = method, y = rank, col = method)) + geom_dotplot()+ggtitle("rank_1000")
df_plot %>% ggplot(aes(x = method, y = rank, col = method)) + geom_dotplot(binaxis = "y")+ggtitle("rank_1000")
df_plot %>% ggplot(aes(x = method, y = rank, col = method)) + geom_dotplot(binaxis = "y")+ggtitle("rank_1000")
df_plot %>% ggplot(aes(x = method, y = rank, col = method)) +
geom_dotplot(binaxis = rank)+ggtitle("rank_1000")
data_1000 %>% ggplot(aes(x = method, y = rank, col = method)) +
geom_dotplot(binaxis = rank)+ggtitle("rank_1000")
data_1000 %>% ggplot(aes(x = method, y = rank, col = method)) +
geom_dotplot(binaxis = rank, binwidth = .5)+ggtitle("rank_1000")
data_1000 %>% ggplot(aes(x = method, y = rank, col = method)) +
geom_dotplot(binaxis = "y", binwidth = .5)+ggtitle("rank_1000")
data_1000 %>% ggplot(aes(x = method, y = rank, col = method)) +
geom_dotplot(binaxis = "y", binwidth = .1)+ggtitle("rank_1000")
data_1000 %>% ggplot(aes(x = method, y = rank, col = method)) +
geom_dotplot(binaxis = "y", binwidth = .2)+ggtitle("rank_1000")
data_1000 %>% ggplot(aes(x = method, y = rank, col = method)) +
geom_dotplot(binaxis = "y", binwidth = .15)+ggtitle("rank_1000")
data_1000 %>% ggplot(aes(x = method, y = rank, col = method)) +
geom_dotplot(binaxis = "y", binwidth = .1)+ggtitle("rank_1000")
data_2000 = data.frame(EM_rank = c(1,1,2,2,5,1,1),
FS_rank = c( 2,5,1,3,4,1,2),
Trend_rank =c(3,4,3,1,4,4,5),
M3drop_rank = c(5,6,5,1,5,5,7),
HVGvst_rank = c(6,6,6,6,6,6,6),
HVGdisp_rank = c(5,2,4,2,3,3,4),
HLG_rank = c(3,4,5,3,2,2,3)
)
data_2000 = data_2000 %>% gather(method, rank, EM_rank, FS_rank,
Trend_rank, M3drop_rank,HVGvst_rank,HVGdisp_rank,
HLG_rank)
data_2000 %>% ggplot(aes(x = method, y = rank, col = method)) +
geom_dotplot(binaxis = "y", binwidth = .1)+ggtitle("rank_2000")
library(EMDE)
Rcpp::sourceCpp("src/FSEM.cpp")
library(EMDE)
library(EMDE)
library(EMDE)
library(EMDE)
library(EMDE)
load("/Users/huge/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/5a93d765a9619d6fccfd381a80198c6d/Message/MessageTemp/ce113304ab8f442c8fe16c1aed86e495/File/check.RData")
x = counts[2,]
# x = counts[1996,]
em.stat(x=x, alpha.ini=rbind(alpha.label),k0=200,C=0.00001,labels =cluster.labels,
group.num = 8,prior.weight=0.0,earlystop = 1e-5)
library(EMDE)
library(EMDE)
tools::toTitleCase("EM-test for feature selection and differential expression gene analysis")
?person
person("Zihao", "Chen", role = c("aut", "cre"),
email = "g.e.challenger@pku.edu.cn")
